# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainView.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import itertools

from PyQt5 import QtCore, QtGui, QtWidgets
from library import connection, messagebox
from youtube_comment_scraper_python import *
import subprocess
import pandas as pd
import sys

class Ui_MainWindow(object):
    def preprocessing_view(self):
        subprocess.Popen(['python', 'preprocessingView.py'], shell=True)
        sys.exit()

    def pembobotan_view(self):
        subprocess.Popen(['python', 'pembobotanView.py'], shell=True)
        sys.exit()

    def save(self):
        link = self.txtLink.text()
        insert = (link)
        cur, con = connection()
        sql = "INSERT INTO link (link) VALUES (%s)"
        data = cur.execute(sql, insert)
        if(data):
            messagebox('SUKSES', "Data Link Tersimpan")
            self.txtLink.setText('')
            cur.execute("SELECT link FROM link")
            result = cur.fetchall()
            self.tbLink.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tbLink.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbLink.setItem(row_number, column_number,
                                        QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        else:
            messagebox('GAGAL', "Data Gagal Tersimpan")

    def show_data(self):
        cur, con = connection()
        cur.execute("SELECT link FROM link")
        result = cur.fetchall()
        self.tbLink.setRowCount(0)

        for row_number, row_data in enumerate(result):
            self.tbLink.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tbLink.setItem(row_number, column_number,
                                    QtWidgets.QTableWidgetItem(str(data)))
        con.close()

    def cellClickedTable(self, row, column):
        current_row = self.tbLink.currentRow()
        current_column = self.tbLink.currentColumn()
        cell_value = self.tbLink.item(current_row, current_column).text()
        cur, con = connection()
        sql = "SELECT * FROM link WHERE link = %s"
        cur.execute(sql, cell_value)
        result = cur.fetchone()
        self.txtId.setText(str(result[0]))
        self.txtLink.setText(result[1])
        self.btnUpdate.setEnabled(True)
        self.btnHapus.setEnabled(True)
        self.btnTambah.setEnabled(False)

    def update(self):
        id = self.txtId.text()
        link = self.txtLink.text()
        cur, con = connection()
        sql = "UPDATE link SET link=%s WHERE id=%s"
        data = cur.execute(sql, (link, id))
        if(data):
            messagebox("SUKSES", "Data Berhasil Di Perbarui")
            self.txtLink.setText('')
            cur.execute("SELECT link FROM link")
            result = cur.fetchall()
            self.tbLink.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tbLink.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbLink.setItem(row_number, column_number,
                                        QtWidgets.QTableWidgetItem(str(data)))
            con.close()
            self.btnUpdate.setEnabled(False)
            self.btnHapus.setEnabled(False)
            self.btnTambah.setEnabled(True)
        else:
            messagebox("GAGAL", "Data Gagal Di Perbarui")

    def delete(self):
        id = self.txtId.text()
        cur, con = connection()
        sql = "DELETE FROM link WHERE id=%s"
        data = cur.execute(sql, id)
        if(data):
            messagebox("SUKSES", "Data Berhasil Di Hapus")
            self.txtLink.setText('')
            cur.execute("SELECT link FROM link")
            result = cur.fetchall()
            self.tbLink.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tbLink.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbLink.setItem(row_number, column_number,
                                        QtWidgets.QTableWidgetItem(str(data)))
            con.close()
            self.btnUpdate.setEnabled(False)
            self.btnHapus.setEnabled(False)
            self.btnTambah.setEnabled(True)
        else:
            messagebox("GAGAL", "Data Gagal Di Hapus")

    def get_comment(self):
        try:
            cur, con = connection()
            cur.execute('SELECT link from link')
            result = cur.fetchall()

            tuple_links = []
            for h in result:
                tuple_links.append(h)

            links = list(itertools.chain(*tuple_links))

            for i in links:
                youtube.open(i)

                for j in range(0, 2):
                    response = youtube.video_comments()
                    data = response['body']

                for k in data:
                    comment = k["Comment"]
                    suka = k["Likes"]
                    waktu = k["Time"]
                    userlink = k["UserLink"]
                    user = k["user"]
                    sql = "INSERT INTO komentar (komentar, suka, waktu, userlink, user) Values (%s, %s, %s, %s, %s)"
                    cur.execute(sql, (comment, suka, waktu, userlink, user))
        except Exception as e:
            print(e)

    def save_to_csv(self):
        try:
            cur, con = connection()
            cur.execute('SELECT link from link')
            result = cur.fetchall()

            tuple_links = []
            for h in result:
                tuple_links.append(h)

            links = list(itertools.chain(*tuple_links))

            all_comment =[]
            for i in links:
                youtube.open(i)

                for j in range(0, 4):
                    response = youtube.video_comments()
                    data = response['body']
                    all_comment.extend(data)

            df = pd.DataFrame(all_comment)
            df.to_csv('Komentar.csv')
        except Exception as e:
            print(e)

    def coba(self):
        textString = "Testing"
        textInteger = 1
        print(textString, textInteger)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 596)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnTambah = QtWidgets.QPushButton(self.centralwidget)
        self.btnTambah.setGeometry(QtCore.QRect(660, 80, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        self.btnTambah.setFont(font)
        self.btnTambah.setObjectName("btnTambah")
        self.btnTambah.clicked.connect(self.save)
        self.btnGetComment = QtWidgets.QPushButton(self.centralwidget)
        self.btnGetComment.setGeometry(QtCore.QRect(590, 500, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        self.btnGetComment.setFont(font)
        self.btnGetComment.setObjectName("btnGetComment")
        self.btnGetComment.clicked.connect(self.get_comment)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 801, 61))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(119, 119, 119);\n"
                                 "color: rgb(255, 255, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.txtLink = QtWidgets.QLineEdit(self.centralwidget)
        self.txtLink.setGeometry(QtCore.QRect(50, 80, 601, 31))
        self.txtLink.setObjectName("txtLink")
        self.tbLink = QtWidgets.QTableWidget(self.centralwidget)
        self.tbLink.setGeometry(QtCore.QRect(50, 130, 701, 351))
        self.tbLink.setRowCount(10)
        self.tbLink.setObjectName("tbLink")
        self.tbLink.setColumnCount(1)
        self.show_data()
        self.tbLink.cellClicked.connect(self.cellClickedTable)
        item = QtWidgets.QTableWidgetItem()
        self.tbLink.setHorizontalHeaderItem(0, item)
        header = self.tbLink.horizontalHeader()
        header.setStretchLastSection(True)
        self.txtId = QtWidgets.QLineEdit(self.centralwidget)
        self.txtId.setGeometry(QtCore.QRect(530, 80, 113, 20))
        self.txtId.setObjectName("txtId")
        self.btnHapus = QtWidgets.QPushButton(self.centralwidget)
        self.btnHapus.setGeometry(QtCore.QRect(484, 500, 91, 41))
        self.btnHapus.setObjectName("btnHapus")
        self.btnHapus.setEnabled(False)
        self.btnHapus.clicked.connect(self.delete)
        self.btnUpdate = QtWidgets.QPushButton(self.centralwidget)
        self.btnUpdate.setGeometry(QtCore.QRect(384, 500, 91, 41))
        self.btnUpdate.setObjectName("btnUpdate")
        self.btnUpdate.setEnabled(False)
        self.btnUpdate.clicked.connect(self.update)
        self.txtId.raise_()
        self.btnTambah.raise_()
        self.btnGetComment.raise_()
        self.label.raise_()
        self.txtLink.raise_()
        self.tbLink.raise_()
        self.btnHapus.raise_()
        self.btnUpdate.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuHome = QtWidgets.QMenu(self.menubar)
        self.menuHome.setObjectName("menuHome")
        self.menuDataset = QtWidgets.QMenu(self.menubar)
        self.menuDataset.setObjectName("menuDataset")
        self.menuDataset.addAction('Preprocessing View', self.preprocessing_view)
        self.menuPreprocessing = QtWidgets.QMenu(self.menubar)
        self.menuPreprocessing.setObjectName("menuPreprocessing")
        self.menuPreprocessing.addAction('Pembobotan View', self.pembobotan_view)
        self.menuNaive_Bayes = QtWidgets.QMenu(self.menubar)
        self.menuNaive_Bayes.setObjectName("menuNaive_Bayes")
        self.menuPengujian = QtWidgets.QMenu(self.menubar)
        self.menuPengujian.setObjectName("menuPengujian")
        self.menuPengujian_2 = QtWidgets.QMenu(self.menubar)
        self.menuPengujian_2.setObjectName("menuPengujian_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuHome.menuAction())
        self.menubar.addAction(self.menuDataset.menuAction())
        self.menubar.addAction(self.menuPreprocessing.menuAction())
        self.menubar.addAction(self.menuNaive_Bayes.menuAction())
        self.menubar.addAction(self.menuPengujian.menuAction())
        self.menubar.addAction(self.menuPengujian_2.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btnTambah.setText(_translate("MainWindow", "Tambah Link"))
        self.btnGetComment.setText(_translate(
            "MainWindow", "Dapatkan Komentar"))
        self.label.setText(_translate("MainWindow", "Home"))
        item = self.tbLink.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Link"))
        self.btnHapus.setText(_translate("MainWindow", "Hapus"))
        self.btnUpdate.setText(_translate("MainWindow", "Update"))
        self.menuHome.setTitle(_translate("MainWindow", "Home"))
        self.menuDataset.setTitle(_translate("MainWindow", "Dataset"))
        self.menuPreprocessing.setTitle(
            _translate("MainWindow", "Preprocessing"))
        self.menuNaive_Bayes.setTitle(_translate("MainWindow", "Pembobotan"))
        self.menuPengujian.setTitle(_translate("MainWindow", "Naive Bayes"))
        self.menuPengujian_2.setTitle(_translate("MainWindow", "Pengujian"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
